/////////// Floods in Tana River Basin
var alos = ee.Image("JAXA/ALOS/AW3D30/V2_2");
Map.centerObject(AOI, 8)

/**
 * Function to mask clouds using the Sentinel-2 QA band
 * @param {ee.Image} image Sentinel-2 image
 * @return {ee.Image} cloud masked Sentinel-2 image 
 */
function maskS2clouds(image) {
  var qa = image.select('QA60');  

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask).divide(10000);
}

//******************************      2021      ****************************************//////

/////////// Time before floods 

var Time2021_before = ic_s2.filterDate("2021-01-01", "2021-03-14")
                        .filterMetadata("CLOUDY_PIXEL_PERCENTAGE", "less_than", 40)
                        .map(maskS2clouds)
                        .median()
                        .clip(AOI)
    
/////////// Time after floods
                        
var Time2021_after = ic_s2.filterDate("2021-03-26", "2021-05-26")
                        .filterMetadata("CLOUDY_PIXEL_PERCENTAGE", "less_than", 40)
                        .map(maskS2clouds)
                        .median()
                        .clip(AOI)
                        


////////// Modified Normalized Difference Water Index (NDWI)

var after2021_flood = Time2021_after.normalizedDifference(["B3", "B11"]).rename("MNDWI")
var before2021_flood = Time2021_before.normalizedDifference(["B3", "B11"]).rename("MNDWI")



//******************************      2020      ****************************************//////

/////////// Time before floods 

var Time2020_before = ic_s2.filterDate("2020-01-25", "2020-04-09")
                        .filterMetadata("CLOUDY_PIXEL_PERCENTAGE", "less_than", 40)
                        .map(maskS2clouds)
                        .median()
                        .clip(AOI)
    
/////////// Time after floods
                        
var Time2020_after = ic_s2.filterDate("2020-04-11", "2020-06-30")
                        .filterMetadata("CLOUDY_PIXEL_PERCENTAGE", "less_than", 40)
                        .map(maskS2clouds)
                        .median()
                        .clip(AOI)
                        

/////////// 2020 RGB COMPOSITE

var filtered2020 = ic_s2.filterDate("2020-01-01", "2020-12-31")
                  .filterMetadata("CLOUDY_PIXEL_PERCENTAGE", "less_than", 40)
                        .map(maskS2clouds)
                        //.median()
                        //.clip(AOI);


var composite2020 = filtered2020.median().clip(AOI)

var addIndices = function(image) {
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename(['ndvi']);
  var ndbi = image.normalizedDifference(['B11', 'B8']).rename(['ndbi']);
  var mndwi = image.normalizedDifference(['B3', 'B11']).rename(['mndwi']); 
  var bsi = image.expression(
      '(( X + Y ) - (A + B)) /(( X + Y ) + (A + B)) ', {
        'X': image.select('B11'), //swir1
        'Y': image.select('B4'),  //red
        'A': image.select('B8'), // nir
        'B': image.select('B2'), // blue
  }).rename('bsi');
  return image.addBands(ndvi).addBands(ndbi).addBands(mndwi).addBands(bsi)
}

var composite2020 = addIndices(composite2020);


var elev = alos.select('AVE_DSM').divide(2000).rename('elev');
var slope = ee.Terrain.slope(alos.select('AVE_DSM')).divide(30).rename('slope');

var composite2020 = composite2020.addBands(elev).addBands(slope);

//////////*********** Modified Normalized Difference Water Index (NDWI)    ********///////////////

var after2020_flood = Time2020_after.normalizedDifference(["B3", "B11"]).rename("MNDWI")
var before2020_flood = Time2020_before.normalizedDifference(["B3", "B11"]).rename("MNDWI")

Map.addLayer(composite2020, {min:0, max:0.3, bands:['B4', 'B3', 'B2']}, '2020 RGB Composite', false)

//////////**********************     2020 CLASSIFICATION    *****************//////////////

var bands = ["B2", "B3", "B4", "B8", "B8A", "B11"]

var gcps = Tana.merge(Grassland).merge(Bareland).merge(Bushland).merge(Cropland).merge(Settlement).merge(Shrubs)

// Add a random column and split the GCPs into training and validation set
var TGCP = gcps.randomColumn()

// This being a simpler classification, we take 70% points
// for validation. Normal recommended ratio is
// 70% training, 30% validation
var trainingGcp = TGCP.filter(ee.Filter.lt('random', 0.7));
var validationGcp = TGCP.filter(ee.Filter.gte('random', 0.7));



// Overlay the point on the image to get training data.
var training = composite2020.sampleRegions({
  collection: trainingGcp, 
  properties: ['landcover'], 
  scale: 20,
  tileScale: 16
});



// Train a classifier.
var classifier = ee.Classifier.smileRandomForest(10).train({
  features: training,  
  classProperty: 'landcover', 
  inputProperties: bands
});
// // Classify the image.
//var classified2020 = composite.select(bands).classify(classifier)
var classified2020 = composite2020.classify(classifier);
Map.addLayer(classified2020, {min: 0, max: 6, palette: ['00FFFF', 'F0E68C', 'b4b4b4', '006400', 'f096ff', 'A52A2A', 'ffbb22']}, '2020 Classified Map', false);

Export.image.toDrive({
  image: classified2020,
  description:'TANA_RIVER_BASIN_CLASSIFIED_2020',
  scale: 20,
  region: AOI,
}); 

/////////////////////////////////////////////////////////////////////////////////
//____________________3)  ACCURACY ASSESSMENT SECTION_____________________________//
//////////////////////////////////////////////////////////////////////////////////


//Validation data is sampled from the classified image with regard
//to the validation points.
var validation = classified2020.sampleRegions({
    //The validation features from which validation data is sampled
    collection: Tana,
    //property name in the validation features that contain the classification label
    properties: ['landcover'],
    scale: 10
  });
  //print('Validation', validation);
  
  // compare the landcover of your validation data against the classification results
  
  var testAccuracy = validation.errorMatrix('landcover', 'classification');
  
  //  print the error matrix to the console
  
  print('Confusion Matrix:', testAccuracy);
  
  
  
  //print overall accuracy and Kappa value to the console
  
  print('Overall Accuracy:',testAccuracy.accuracy().multiply(100));
  
///*******************    ESA LAND COVER MAP 2020 *******************//////////////////////

var dataset = ee.ImageCollection("ESA/WorldCover/v100").first();

var visualization = {
  bands: ['Map'],
};

Map.addLayer(dataset.clip(AOI), visualization, "2020 ESA LAND COVER", false);

//-------------------------------- Urban area ------------------------------//

// Using the same Sentinel Land Cover Product 
// Filter urban areas
var urbanmask = dataset.eq(50)
var urban = dataset
  .updateMask(urbanmask)
/**
//Calculate affected urban areas using the resampled flood layer
var urban_affected = urban
  .mask(flooded_res)
  .updateMask(urban);
**/
// get pixel area of affected urban layer
var urban_pixelarea = urban
  .multiply(ee.Image.pixelArea()); //calcuate the area of each pixel 

// sum pixels of affected cropland layer
var urban_stats = urban_pixelarea.reduceRegion({
  reducer: ee.Reducer.sum(), //sum all pixels with area information                
  geometry: AOI,
  scale: 20,
  bestEffort: true,
  });

// convert area to hectares
var urban_area_ha = urban_stats
  .getNumber('Map')
  .divide(10000)
  .round();

print("Urban Areas in Hectares", urban_area_ha )

/////////////////////////**********************      2020 AREA CALCULATION       ***********************************************/////////////////

var areaImage = ee.Image.pixelArea().divide(1e4).addBands(classified2020);
 
var areas2020 = areaImage.reduceRegion({
      reducer: ee.Reducer.sum().group({
      groupField: 1,
      groupName: 'landcover',
    }),
    geometry: AOI,
    scale: 100,
    maxPixels: 1e12,
    tileScale: 16
    }); 
 
print('2020 Landcover Areas in Hectares', areas2020);

var areaChart = ui.Chart.image.byClass({
  image: areaImage,
  classBand: 'classification', 
  region: AOI,
  scale: 100,
  reducer: ee.Reducer.sum(),
  classLabels: ['Water body', 'Grassland', 'Bareland','Bushland', 'Cropland','Settlement', 'Shrubland'],
}).setOptions({
  hAxis: {title: 'Classes'},
  vAxis: {title: 'Area Ha'},
  title: '2020 Area by class',
  series: {
    0: { color: '00FFFF' },
    1: { color: 'F0E68C' },
    2: { color: 'b4b4b4' },
    3: { color: '006400' },
    4: { color: 'f096ff' },
    5: { color: 'A52A2A' },
    6: { color: 'ffbb22' }
  }
});
print('2020 AREA CHART',areaChart); 


//******************************      Sentinel 2018      ****************************************//////

/////////// Time before floods 
/**
var Time2018_before = ic_s2.filterDate("2018-01-25", "2018-04-09")
                        .filterMetadata("CLOUDY_PIXEL_PERCENTAGE", "less_than", 80)
                        .map(maskS2clouds)
                        .median()
                        .clip(AOI)
    
/////////// Time after floods
                        
var Time2018_after = ic_s2.filterDate("2018-04-11", "2018-06-30")
                        .filterMetadata("CLOUDY_PIXEL_PERCENTAGE", "less_than", 80)
                        .map(maskS2clouds)
                        .median()
                        .clip(AOI)
                        

/////////// 2018 RGB COMPOSITE

var filtered2018 = ic_s2.filterDate("2018-01-01", "2018-12-31")
                  .filterMetadata("CLOUDY_PIXEL_PERCENTAGE", "less_than", 80)
                        .map(maskS2clouds)
                        //.median()
                        //.clip(AOI);


var composite2018 = filtered2018.median().clip(AOI)

// var addIndices = function(image) {
//   var ndvi = image.normalizedDifference(['B8', 'B4']).rename(['ndvi']);
//   var ndbi = image.normalizedDifference(['B11', 'B8']).rename(['ndbi']);
//   var mndwi = image.normalizedDifference(['B3', 'B11']).rename(['mndwi']); 
//   var bsi = image.expression(
//       '(( X + Y ) - (A + B)) /(( X + Y ) + (A + B)) ', {
//         'X': image.select('B11'), //swir1
//         'Y': image.select('B4'),  //red
//         'A': image.select('B8'), // nir
//         'B': image.select('B2'), // blue
//   }).rename('bsi');
//   return image.addBands(ndvi).addBands(ndbi).addBands(mndwi).addBands(bsi)
// }

var composite2018 = addIndices(composite2018);


var elev = alos.select('AVE_DSM').divide(2000).rename('elev');
var slope = ee.Terrain.slope(alos.select('AVE_DSM')).divide(30).rename('slope');

var composite2018 = composite2018.addBands(elev).addBands(slope);
**/


//////////*********** Modified Normalized Difference Water Index (NDWI)    ********///////////////
/**
var after2018_flood = Time2018_after.normalizedDifference(["B3", "B11"]).rename("MNDWI")
var before2018_flood = Time2018_before.normalizedDifference(["B3", "B11"]).rename("MNDWI")

Map.addLayer(composite2018, {min:0, max:0.3, bands:['B4', 'B3', 'B2']}, '2018 RGB Composite', false)
**/


//***********************************     Landsat 2018      ****************************************//////

/**
 * Function to mask clouds based on the pixel_qa band of Landsat 8 SR data.
 * @param {ee.Image} image Input Landsat 8 SR image
 * @return {ee.Image} Cloudmasked Landsat 8 image
 */
function maskL8sr(image) {
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  var cloudShadowBitMask = (1 << 4);
  var cloudsBitMask = (1 << 3);
  // Get the pixel QA band.
  var qa = image.select('QA_PIXEL');
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                 .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return image.updateMask(mask);
}

// Applies scaling factors.
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true);
}


/////////// Time before floods

var Time2018_before = ic_l8.filterDate("2018-01-01", "2018-08-28")
                  .filterMetadata("CLOUD_COVER", "less_than", 40)
                  .map(maskL8sr)
                  .map(applyScaleFactors)
                  .median()
                  .clip(AOI);


/////////// Time after floods

var Time2018_after = ic_l8.filterDate("2018-09-02", "2018-12-30")
                  .filterMetadata("CLOUD_COVER", "less_than", 40)
                  .map(maskL8sr)
                  .map(applyScaleFactors)
                  .median()
                  .clip(AOI);


/////////// 2018 RGB COMPOSITE

var composite2018 = ic_l8.filterDate("2018-01-01", "2018-12-31")
                  //.filterMetadata("CLOUD_COVER", "less_than", 50)
                  .map(maskL8sr)
                  .map(applyScaleFactors)
                  .median()
                  .clip(AOI);


////////// Modified Normalized Difference Water Index (MNDWI)

var after2018_flood = Time2018_after.normalizedDifference(["SR_B3", "SR_B6"]).rename("MNDWI")
var before2018_flood = Time2018_before.normalizedDifference(["SR_B3", "SR_B6"]).rename("MNDWI")


Map.addLayer(composite2018, {min:0, max:0.3, bands:['SR_B4', 'SR_B3', 'SR_B2']}, '2018 RGB Composite')

///////////***************************     2018 CLASSIFICATION    *********************************************//////////////
/**
var bands = ["SR_B2", "SR_B3", "SR_B4", "SR_B5", "SR_B6"]

var gcps2018 = Water2018.merge(Grassland2018).merge(Bareland2018).merge(Bushland2018).merge(Cropland2018).merge(Settlement2018).merge(Shrubs2018)

// Add a random column and split the GCPs into training and validation set
var TGCP2018 = gcps2018.randomColumn()

// This being a simpler classification, we take 70% points
// for validation. Normal recommended ratio is
// 70% training, 30% validation
var trainingGcp2018 = TGCP2018.filter(ee.Filter.lt('random', 0.7));
var validationGcp2018 = TGCP2018.filter(ee.Filter.gte('random', 0.7));



// Overlay the point on the image to get training data.
var training2018 = composite2018.sampleRegions({
  collection: trainingGcp2018, 
  properties: ['landcover'], 
  scale: 30,
  tileScale: 16
});

// Train a classifier.
var classifier2018 = ee.Classifier.smileRandomForest(10).train({
  features: training2018,  
  classProperty: 'landcover', 
  inputProperties: bands
});
//********* Classify the image.
var classified2018 = composite2018.classify(classifier2018);

Map.addLayer(classified2018, {min: 0, max: 6, palette: ['00FFFF', 'F0E68C', 'b4b4b4', '006400', 'f096ff', 'A52A2A', 'ffbb22']}, '2015-2016 Classified Map');
**/





//***********************************     Landsat 2016      ****************************************//////

/**
 * Function to mask clouds based on the pixel_qa band of Landsat 8 SR data.
 * @param {ee.Image} image Input Landsat 8 SR image
 * @return {ee.Image} Cloudmasked Landsat 8 image
 */
function maskL8sr(image) {
    // Bits 3 and 5 are cloud shadow and cloud, respectively.
    var cloudShadowBitMask = (1 << 4);
    var cloudsBitMask = (1 << 3);
    // Get the pixel QA band.
    var qa = image.select('QA_PIXEL');
    // Both flags should be set to zero, indicating clear conditions.
    var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                   .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
    return image.updateMask(mask);
  }
  
  
  // Applies scaling factors.
  function applyScaleFactors(image) {
    var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
    var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
    return image.addBands(opticalBands, null, true)
                .addBands(thermalBands, null, true);
  }
  
  /////////// Time before floods
  
  var Time2016_before = ic_l8.filterDate("2016-01-01", "2016-08-28")
                    .filterMetadata("CLOUD_COVER", "less_than", 40)
                    .map(maskL8sr)
                    .map(applyScaleFactors)
                    .median()
                    .clip(AOI);
  
  
  /////////// Time after floods
  
  var Time2016_after = ic_l8.filterDate("2016-09-02", "2016-12-30")
                    .filterMetadata("CLOUD_COVER", "less_than", 100)
                    .map(maskL8sr)
                    .map(applyScaleFactors)
                    .median()
                    .clip(AOI);
  
  
  /////////// 2015 RGB COMPOSITE
  
  var composite2016 = ic_l8.filterDate("2016-01-01", "2016-12-31")
                    .filterMetadata("CLOUD_COVER", "less_than", 50)
                    .map(maskL8sr)
                    .map(applyScaleFactors)
                    .median()
                    .clip(AOI);
  
  
  ////////// Modified Normalized Difference Water Index (MNDWI)
  
  var after2016_flood = Time2016_after.normalizedDifference(["SR_B3", "SR_B6"]).rename("MNDWI")
  var before2016_flood = Time2016_before.normalizedDifference(["SR_B3", "SR_B6"]).rename("MNDWI")
  
  
  Map.addLayer(composite2016, {min:0, max:0.3, bands:['SR_B4', 'SR_B3', 'SR_B2']}, '2016 RGB Composite', false)
  
  ///////////**********************     2016 CLASSIFICATION    *****************//////////////
  
  var bands = ["SR_B2", "SR_B3", "SR_B4", "SR_B5", "SR_B6"]
  
  var gcps2016 = Water2016.merge(Grassland2016).merge(Bareland2016).merge(Bushland2016).merge(Cropland2016).merge(Settlement2016).merge(Shrubs2016)
  
  // Add a random column and split the GCPs into training and validation set
  var TGCP2016 = gcps2016.randomColumn()
  
  // This being a simpler classification, we take 70% points
  // for validation. Normal recommended ratio is
  // 70% training, 30% validation
  var trainingGcp2016 = TGCP2016.filter(ee.Filter.lt('random', 0.7));
  var validationGcp2016 = TGCP2016.filter(ee.Filter.gte('random', 0.7));
  
  
  
  // Overlay the point on the image to get training data.
  var training2016 = composite2016.sampleRegions({
    collection: trainingGcp2016, 
    properties: ['landcover'], 
    scale: 30,
    tileScale: 16
  });
  
  
  // Train a classifier.
  var classifier2016 = ee.Classifier.smileRandomForest(10).train({
    features: training2016,  
    classProperty: 'landcover', 
    inputProperties: bands
  });
  //********* Classify the image.
  var classified2016 = composite2016.classify(classifier2016);
  
  Map.addLayer(classified2016, {min: 0, max: 6, palette: ['00FFFF', 'F0E68C', 'b4b4b4', '006400', 'f096ff', 'A52A2A', 'ffbb22']}, '2016 Classified Map', false);
  
  
  Export.image.toDrive({
    image: classified2016,
    description:'TANA_RIVER_BASIN_CLASSIFIED_2016',
    scale: 30,
    region: AOI,
  }); 
  
  /////////////////////////**********************      2016 AREA CALCULATION       ***********************************************/////////////////

var areaImage2016 = ee.Image.pixelArea().divide(1e4).addBands(classified2016);
 
var areas2016 = areaImage2016.reduceRegion({
      reducer: ee.Reducer.sum().group({
      groupField: 1,
      groupName: 'landcover',
    }),
    geometry: AOI,
    scale: 100,
    maxPixels: 1e12,
    tileScale: 16
    }); 
 
print('2016 Landcover Areas in Hectares', areas2016);

var areaChart2016 = ui.Chart.image.byClass({
  image: areaImage2016,
  classBand: 'classification', 
  region: AOI,
  scale: 100,
  reducer: ee.Reducer.sum(),
  classLabels: ['Water body', 'Grassland', 'Bareland','Bushland', 'Cropland','Settlement', 'Shrubland'],
}).setOptions({
  hAxis: {title: 'Classes'},
  vAxis: {title: 'Area Ha'},
  title: '2016 Area by class',
  series: {
    0: { color: '00FFFF' },
    1: { color: 'F0E68C' },
    2: { color: 'b4b4b4' },
    3: { color: '006400' },
    4: { color: 'f096ff' },
    5: { color: 'A52A2A' },
    6: { color: 'ffbb22' }
  }
});
print('2016 AREA CHART', areaChart2016); 

//////////// Let's work with SplitPanels modifying a bit the user interface!

//ui.root.clear()

///////// map before the flood

//var map = ui.Map()

// map.addLayer(composite2016, {min:0, max:0.3, bands:['SR_B4', 'SR_B3', 'SR_B2']}, '2016 RGB Composite', false)

// map.addLayer(Time2016_before, {min:0, max:0.3, bands:['SR_B4', 'SR_B3', 'SR_B2']}, '2016 RGB BEFORE FLOODS', false)

// map.addLayer(before2016_flood, {min:0, max:0.5, palette:['green', 'blue']}, "2016 Pre-floods", false)

// map.addLayer(before2020_flood, {min:0, max:0.5, palette:['green', 'blue']}, "2020 Pre-floods", false)

// //map.addLayer(before2021_flood, {min:0, max:0.5, palette:['green', 'blue']}, "2021 Pre-floods", false)

// map.addLayer(classified2015, {min: 0, max: 6, palette: ['00FFFF', 'F0E68C', 'b4b4b4', '006400', '808000', 'A52A2A', 'ffbb22']}, '2016 Classified Map');

// var before_title = ui.Label({value: "BEFORE", style: {position: "bottom-center"}})

// map.add(before_title)


/////////// map after the flood

// var map2 = ui.Map()

// map2.addLayer(composite2020, {min:0, max:0.3, bands:['B4', 'B3', 'B2']}, '2020 RGB Composite', false)

// map2.addLayer(Time2016_after, {min:0, max:0.3, bands:['SR_B4', 'SR_B3', 'SR_B2']}, '2016 RGB AFTER FLOODS', false)

// map2.addLayer(after2016_flood, {min:0, max:0.5, palette:['green', 'blue']}, "2016 After Floods", false)

// map2.addLayer(after2020_flood, {min:0, max:0.5, palette:['green', 'blue']}, "2020 After Floods", false)

//map2.addLayer(after2021_flood, {min:0, max:0.5, palette:['green', 'blue']}, "2021 Floods", false)

// map2.addLayer(classified2020, {min: 0, max: 6, palette: ['00FFFF', 'F0E68C', 'b4b4b4', '006400', '808000', 'A52A2A', 'ffbb22']}, '2020 Classified Map');

// var after_title = ui.Label({value: "AFTER", style:{position: "bottom-right"}})

// map2.add(after_title)


////***********************     LEGEND PANEL   *****************************/////////////////////////

//Define a GEE user interface panel on which to draw the legend
var legend = ui.Panel({
    style: {
      position: 'bottom-right',
      padding: '6px 15px'
    }
  });
  
  var legendTitle = ui.Label({
    value: 'Legend',
    style: {
      fontWeight: 'bold',
      fontSize: '18px',
      margin: '0 0 4px 0',
      padding: '0'
      }
  });
  
  
  // Add the title to the legend
  legend.add(legendTitle);
  
  //Define the color of each land cover class.
  //The colors correspond to these classes respectively;
               //Natural forest, Plantation, Bamboo, Cropland, Open Grass land, Wooded grassland
  var palette =['00FFFF', 'F0E68C', 'b4b4b4', '006400', 'f096ff', 'A52A2A', 'ffbb22'];
   
  //Add the names of the classes
  var names = ['Water body', 'Grassland', 'Bareland','Bushland', 'Cropland','Settlement', 'Shrubland'];
  
  //This function defines how each element of the key will appear
   var makeRow = function(color, name){
        // Create the label that is actually the colored box.
        var colorBox = ui.Label({
          style: {
            backgroundColor: '#' + color,
            // Use padding to give the box height and width.
            padding: '8px',
            margin: '0 0 4px 0'
          }
        });
        // Create the label filled with the description text.
        var description = ui.Label({
          value: name,
          style: {margin: '0 0 4px 6px'}
        });
        // return the panel
        return ui.Panel({
          widgets: [colorBox, description],
          layout: ui.Panel.Layout.Flow('horizontal')
        });
  };
  //Use the function to add each land cover class and its corresponding color to the legend
  for (var i = 0; i < 7; i++) {
    legend.add(makeRow(palette[i], names[i]));
  }
  // add legend to map (alternatively you can also print the legend to the console)
  Map.add(legend);
  
  
//***************************************************************************************************************
//Define a GEE user interface panel on which to draw the legend
var legend = ui.Panel({
    style: {
      position: 'bottom-left',
      padding: '6px 15px'
    }
  });
  
  var legendTitle = ui.Label({
    value: 'Legend',
    style: {
      fontWeight: 'bold',
      fontSize: '18px',
      margin: '0 0 4px 0',
      padding: '0'
      }
  });
  
  // Add the title to the legend
  legend.add(legendTitle);
  
  //Define the color of each land cover class.
  //The colors correspond to these classes respectively;
               //Natural forest, Plantation, Bamboo, Cropland, Open Grass land, Wooded grassland
  var palette =['006400','ffbb22','ffff4c','f096ff','fa0000','b4b4b4','f0f0f0','0064c8', '0096a0','00cf75', 'fae6a0' ];
   
  //Add the names of the classes
  var names = ['Trees', 'Shrubland', 'Grassland','Cropland', 'Built-up','Barren / sparse vegetation', 'Snow and ice', 'Open water', 'Herbaceous wetland','Mangroves', 'Moss and lichen' ];
  
  //This function defines how each element of the key will appear
   var makeRow = function(color, name){
        // Create the label that is actually the colored box.
        var colorBox = ui.Label({
          style: {
            backgroundColor: '#' + color,
            // Use padding to give the box height and width.
            padding: '8px',
            margin: '0 0 4px 0'
          }
        });
        // Create the label filled with the description text.
        var description = ui.Label({
          value: name,
          style: {margin: '0 0 4px 6px'}
        });
        // return the panel
        return ui.Panel({
          widgets: [colorBox, description],
          layout: ui.Panel.Layout.Flow('horizontal')
        });
  };
  //Use the function to add each land cover class and its corresponding color to the legend
  for (var i = 0; i < 11; i++) {
    legend.add(makeRow(palette[i], names[i]));
  }
  // add legend to map (alternatively you can also print the legend to the console)
  Map.add(legend);
  
  
  
  
  /////////////**************
  /**
  map.centerObject(AOI, 12)
  map2.centerObject(AOI, 12)
  
  
  
  var SWIPE = ui.SplitPanel({
    firstPanel: map,
    secondPanel: map2,
    orientation: "horizontal",
    wipe: true,
    style:{stretch: "both"}
  })
  
  ui.root.add(SWIPE)
  
  ui.Map.Linker([map, map2])
  
  ***/
  